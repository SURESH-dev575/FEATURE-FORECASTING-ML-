import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sc

data=pd.read_csv('/content/AirPassengers.csv')
data.dropna(inplace=True)
data.drop_duplicates(inplace=True)

data.columns=['Month_data','Passingers']
data['Month_data'].value_counts()

data['Month_data']=pd.to_datetime(data['Month_data'])

data.index=data['Month_data']

data.drop('Month_data',axis=1,inplace=True)


from statsmodels.tsa.stattools import adfuller
test_result=adfuller(data['Passingers'])
print('ADF Statistic: %f' % test_result[0])
print('p-value: %f' % test_result[1])

if test_result[1] <= 0.05:
    print('The series is stationary')
else:
    print('The series is non-stationary')

rolling_mean=data.rolling(window=12).mean()
data_dupli=data-rolling_mean
print(data_dupli.shape)

mean=data_dupli.rolling(window=12).mean()
std=data_dupli.rolling(window=12).std()
plt.plot(data_dupli,color='blue',label='Original')
plt.plot(mean,color='red',label='Rolling Mean')
plt.plot(std,color='black',label='Rolling Std')
plt.legend(loc='best')
plt.show()


data_dupli.shape
print(data_dupli)
data_dupli.dropna(inplace=True)
print(data_dupli.shape)

pred=adfuller(data_dupli['Passingers'])
print('ADF Statistic: %f' % pred[0])
print('p-value: %f' % pred[1])
if pred[1] <= 0.05:
    print('The series is stationary')
else:
    print('The series is non-stationary')


train = data_dupli[:120]
test = data_dupli[120:]


print(train)
print(test)
from statsmodels.tsa.arima.model import ARIMA
model=ARIMA(train,order=(3,0,2))
model_fit=model.fit()
data_dupli['prediction']=model_fit.predict(start=len(train),end=len(train)+len(test)-1)
data_dupli

data_dupli[['Passingers','prediction']].plot(figsize=(8,6))
plt.show()

from statsmodels.tsa.statespace.sarimax import SARIMAX

sr_model=SARIMAX(train,order=(3,0,2),seasonal_order=(3,0,2,12),dynamic=False)
sr_model_fit=sr_model.fit()

pre=sr_model_fit.predict(start=len(train),end=len(train)+len(test)-1)
print(pre)

data_dupli['Passingers'].plot()
pre.plot()
more_data_predict=sr_model_fit.get_forecast(1950)
prediction=more_data_predict.predicted_mean
prediction

data_dupli['Passingers'].plot()
prediction.plot()
plt.legend()
plt.show()
